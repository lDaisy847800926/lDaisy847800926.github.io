<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Git详细使用手册]]></title>
    <url>%2F2018%2F02%2F01%2FGit%E8%AF%A6%E7%BB%86%E4%BD%BF%E7%94%A8%E6%89%8B%E5%86%8C%2F</url>
    <content type="text"><![CDATA[Git 命令大汇总用户信息 git config –global user.name Simon 设置自己的用户名 git config –global user.email jinmaup@gmail.com 设置自己的邮箱 查看配置git config –list 查看自己git的配置信息 设置编辑器git config –global core.editor vim 当你用git编辑文件时，编辑文件的文本编辑器会默认调用vim 文本着色git config –global color.ui true 可为大部分git的代码布上颜色 基础命令建立版本库 git init 当前路径文件 初始化为Git仓库（可以发现 当前路径增加了.git文件夹） git init 文件夹名 新建一个文件夹，并将其初始化为Git代码库 文件添加到暂存区 git add . 把当前目录所有未追踪文件，已修改的文件，添加到暂存区 (不包括被删除的文件) git add 文件（夹）名 把特定文件（夹）添加到暂存区 git add -A 提交所有的文件操作到暂存区 git add -u 提交已修改的文件,被删除的文件（不包括新文件） git add -p 交互式的缓存提交，会提供多个选项来自定义提交内容、方式 文件添加到本地仓库 git commit -m”commit message” 把暂存区的所有文件添加到本地仓库，-m”提交信息” （越详细越好） git commit 文件（夹）名 -m”commit message” 把特定文件（夹）添加到本地仓库，-m”提交信息” （越详细越好） git commit -am”commit message” 针对已经被追踪的文件，可以直接添加到本地仓库，不用先add在commit. git commit –amend -m”commit message” 利用本次commit 重写上一次commit git commit –amend –no-edit 利用本次commit 重写上一次commit 不会重写上次commit的提交信息 仓库状态获取git status 可以立即获取本地仓库状态 以及 git的步骤提示，建议多使用此命令 版本回退 git reset –hard HEAD 将工作区，暂存区，本地仓库恢复到上一个版本（–hard） git reset –soft HEAD^^^ 将本地仓库恢复到上三个版本,不会修改暂存区，工作区（–soft） git reset –mixd HEAD~5 将暂存区，本地仓库恢复到上五个版本，不会修改工作区（–mixd，默认） git reset –hard commitID 将工作区，暂存区，本地仓库恢复到上指定版本其中commitID就是每一次commit的版本号，可以使用git reflog获取 撤销暂存 git reset HEAD file.txt 撤销file.txt的add操作，使其变成不跟踪状态 git reset HEAD^ file.txt 将上一次提交版本的file.txt重新置入缓存区 撤销工作区 git checkout – file.txt （只针对未追踪文件）用历史中的file.txt替换现有工作区的file.txt如果文件增加到暂存区后 又进行了修改，那么执行命令后 将回到暂存区文件状态 git checkout HEAD – file.txt 用最后一次提交版本中的file.txt 替换现有工作区的file.txt git checkout commitID – file.txt 用特定版本的file.txt 替换现有工作区的file.txt 撤销提交git revert commitID 撤销指定版本的commit，并将此操作生成一个全新的commit并提交 文件操作增 touch touch 文件名 ： 新建文件 mkdir mkdir 文件夹名： 新建文件夹 vim vim 文件名 ： 新建文件，并用vim模式打开该文件进行编写 git init git init 文件夹名：新建一个文件夹，并将其初始化为Git代码库 printf printf ‘content’ &gt; 文件名 ：新建一个文件，并把content注入其内容 echo echo ‘content’ &gt; 文件名 ：新建一个文件，并把content注入其内容 删 rm rm 文件名 : 删除文件 clean git clean -f 文件名 ：删除未跟踪文件 改 vim vim 文件名 ： 打开文件，并用vim模式进行修改 mv mv 选定文件名 新的文件名：把选定文件名 修改为 新的文件名 printf printf ‘content’ &gt; 文件名 ： 将 content 替换 文件原有内容 echo echo ‘content’ &gt; 文件名 ： 将 content 替换 文件原有内容 查 pwd 得到当前路径 cd cd 路径 ：进到某一文件路径 cd .. : 回退文件路径 cd : 回到默认的路径 cat cat 文件名：查看该文件的内容 ls 查看该目录下的文件列表（不包括隐藏文件） ls -a 查看该目录下的文件列表（包括隐藏文件） show git show:：展示任意分支某一文件的内容 分支操作查看分支 git branch 列出本地分支 git branch -r 列出远端分支 git branch -a 列出所有分支 git branch -v 查看各个分支最后一个提交对象的信息 git branch –merge 查看已经合并到当前分支的分支 git branch –no-merge 查看为合并到当前分支的分支 git remote show origin 可以查看remote地址，远程分支 新建分支 git branch name 新建一个名为name的分支 git checkout -b name 新建一个名为name的分支，并自动切换为该分支 git branch [branch] [commit] 新建一个分支，指向指定commit git branch –track [branch] [remote-branch] 新建一个分支，与指定的远程分支建立追踪关系 删除分支 git branch -d name 删除一个名为name的分支 git branch -D name 强制删除一个名为name的分支 git push: 删除远程分支 git push origin –delete 删除远程分支 切换分支 git checkout name 切换一个名为name的分支 git checkout - 切换上一个分支 重命名分支git branch -m name将当前所在分支命名为 name 标签新建标签 git tag [tag] 新建一个tag在当前commit git tag [tag] [commit] 新建一个tag在指定commit git tag v0.9 commitID 对某次提交新建标签 查看标签git tag 列出所有tag 删除标签 git tag -d [tag] 删除本地tag git push origin :refs/tags/ 可以删除一个远程标签 推送标签 git push origin –tags 一次性推送全部尚未推送到远程的本地标签 git push origin 可以推送一个本地标签 远程仓库 git remote 显示所关联的远程仓库 git remote -v 显示更详细信息 git remote add origin git@server-name:path/repo-name.git 关联一个远程库 git remote rm name 删除一个远程库 git remote rename 将远程连接从重命名为 合并 git rebase master 将master分之上超前的提交，变基到当前分支 git rebase –interactive 交互模式，修改commit git rebase –continue 处理完冲突继续合并 git rebase –skip 跳过合并 git rebase –abort 取消合并 查看汇总查看信息 git whatchanged –since=’2 weeks ago’ 查看两个星期内的改动 git log –follow [file] 显示某个文件的版本历史 git log –author=”John” 它会显示所有作者叫 John 的提交 get log –after=”yesterday” 查看昨天的历史信息 git log -3 展示最近3次历史信息 git log –graph 可以看到分支合并图 修改历史git rebase -i commitID 将pick 替换成 r , 然后回车，vi退出可以使用 :x 修改 git的历史记录的提交信息 查看文件 git diff HEAD – readme.txt 可以查看工作区和版本库里面最新版本的区别 git diff –staged 显示暂存区（已经add）的文件和版本库文件的比较 git ls-files 查看在暂存区的文件 删除暂存git rm –cached 文件名 把文件从暂缓区 返回至 工作区 其他忽略文件 echo node_modules/ &gt;&gt; .gitignore 添加忽略文件 打包 git archive master –format=zip –output=master.zip 将Master分支打包 git bundle create 将历史记录包括分支内容打包到一个文件中 git clone repo.bundle-b 从某个Bundle中导入工作区 git stash 将工作区现场（已跟踪文件）储藏起来 git stash list 查看保存的工作现场 git stash apply 恢复工作现场 git stash drop 删除stash内容 git stash pop 恢复的同时直接删除stash内容 git stash apply stash@{0} 恢复指定的工作现场 查找内容 git grep “Hello” 从当前目录的所有文件中查找文本内容 git grep “Hello” v2.5 在某一版本中搜索文本 帮助 git help -a]]></content>
      <tags>
        <tag>Git</tag>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[阿里云Ubuntu上软件的安装和卸载]]></title>
    <url>%2F2018%2F01%2F30%2F%E9%98%BF%E9%87%8C%E4%BA%91Ubuntu%E4%B8%8A%E8%BD%AF%E4%BB%B6%E7%9A%84%E5%AE%89%E8%A3%85%E5%92%8C%E5%8D%B8%E8%BD%BD%2F</url>
    <content type="text"><![CDATA[1、Ubuntu相关命令sudo apt-get update 更新源 sudoapt-get install package安装包 sudo apt-get install --reinstall 重新安装包 sudo apt-get remove package 删除 sudo apt-cache search package 搜索软件包 sudo apt-get - -f install 修复安装 2、FTP安装 sudo apt-get install vsftpd 安装ftp 3、WinSCP 上传文件 与虚拟机连接 4、scp 复制文件到阿里云上 scp -r /文件路径/xx.txt root@120.77.252.50：/ root/ 复制阿里云文件到本地上 scp -r root@0.0.0.0：/ root/xx.txt /本地路径 5、阿里云的使用 虚拟机中的 ssh常用于远程连接到阿里云 阿里云的根用户 root 2、新建用户，新添加的用户为daisy useradd -m daisy passwd daisy密码：xxxx usermod -a -G adm daisy usermod -a -G sudo daisy 超级用户 vim /etc/sudoers 写daisy一个一样的 su - daisy 切换到用户daisy下 以下是在阿里云上的安装：3、在阿里云上安装python3.6步骤如下：`sudo apt-get update 更新源 sudo apt-get install software-properties-commn 安装安全协议 sudo add-apt-repository ppa:jonathonf/python-3.6 sudo apt-get update 更新源 sudo apt-get install python3.6 安装python3.6 cd usr/bin 切换 以下操作都在 usr/bin目录下执行： / usr / bin ls | grep python 查看所有的python cd usr/bin 下 sudo rm python 删除软链接 cd usr/bin 下sudo ln -s python3.6m python 创建python3.软链接 sudo apt-get install python3-pip 为python3安装pip pip --version python pip install --upgrade pip 为pip升级 将python3配置为默认的 ` 4、虚拟环境安装：`创建python3.6的虚拟机环境： cd /usr/bin 目录下： sudo pip install virtualenv sudo pip install virtualenvwrapper mkdir ~/.virtualenvs 虚拟环境就在目录下 sudo vim ~/.bashrc 在末尾添加： export WORKON_HOME=$home/.vitualenvs source / usr/ bin/ virtualenvwrapper.sh source ~/.bashrc 激活虚拟环境 deactivate 退出虚拟机环境 ### 创建python3的虚拟机环境 ### mkvirtualenv --python=/usr/bin/python3 djangopy3 ### 创建python2.7的虚拟机环境： ### mkvirtualenv py2 --python=/usr/bin/python2 ` 5、安装mysql`sudo apt-get install mysql-server 安装mysql的服务 用户名 root 密码 root 打开本地的Navicat，连接本地数据库，打开mysql数据库下的mysql,打开 所有的表，点击user ,将localhost修改为% xshell上登录mysql 修改mysql的配置 mysql -u root -p use mysql update user set host=&quot;%&quot; where user=&quot; root&quot;; grant all privileges on *.* to &quot; root&quot; @&quot; %&quot; identifiend by &quot;root&quot; 设置权限 sudo vim /etc/mysql /mysql.conf.d/mysqld.cnf 下 43行 bind-address: 0.0.0.0 sudo service mysql restart 重启mysql服务 mysql服务是自启的` 6、安装MongoDB`sudo tar -zxvf mongodb-linux-x86_64-ubuntu-3.4.0tgz 解压MongoDB sudo mv mongodb /usr/local/mongodb 移动mongodb encho PATH 先查看一下环境变量 sudo vim /etc /profile 最后一行添加 export PATH=/usr/ local/mongodb/bin:$PATH 为MongoDB添加环境变量 source /etc/profile 激活MongoDB sudo vim /etc/mongodb.conf mongodb的配置,直接复制以下 #详细记录输出 verbose = true #指定服务端口号，默认端口27017 port = 27017 #指定MongoDB日志文件，注意是指定文件不是目录 logpath = /home/daisy/mongodb/logs/mongodb.log #使用追加的方式写日志 logappend = true #指定数据库路径 dbpath = /home/daisy/mongodb/db #设置每个数据库将被保存在一个单独的目录 directoryperdb = true #启用验证 auth = false 以守护进程的方式运行MongoDB，创建服务器进程 fork = true #安静输出 quiet = true mkdir /home/daisy/mongodb/logs -p 创建MongoDB的日志目录 mkdir /home/daisy/mongodb/db touch /home/daisy/mongodb/logs/mongodb.log mongod -f /etc/mongod.conf 启动MongoDB服务 手动启动 mongo 启动MongoDB` 注册MongoDB开机自启动：sudo vim /etc/init.d/mongodb 复制以下内容： ` #!/bin/sh ### BEGIN INIT INFO # Provides: mongodb # Required-Start: # Required-Stop: # Default-Start: 2 3 4 5 # Default-Stop: 0 1 6 # Short-Description: mongodb # Description: mongo db server ### END INIT INFO . /lib/lsb/init-functions PROGRAM=/usr/local/mongodb/bin/mongod MONGOPID=`ps -ef | grep &apos;mongod&apos; | grep -v grep | awk &apos;{print $2}&apos;` test -x $PROGRAM || exit 0 case &quot;$1&quot; in start) ulimit -n 3000 log_begin_msg &quot;Starting MongoDB server&quot; $PROGRAM -f /etc/mongod.conf log_end_msg 0 ;; stop) log_begin_msg &quot;Stopping MongoDB server&quot; if [ ! -z &quot;$MONGOPID&quot; ]; then kill -15 $MONGOPID fi log_end_msg 0 ;; status) ;; *) log_success_msg &quot;Usage: /etc/init.d/mongodb {start|stop|status}&quot; exit 1 esac exit 0 sudo chmod a +x /etc/init.d/mongodb 添加权限 sudo update-rc.d mongodb defaults 增加开机脚本 sudo service mongod start 启动 sudo service mongodb stop 停止` 7、redis的安装`sudo apt-get install tcl sudo tar -xvzf redis-3.2.5.tar.gz 解压redis sudo mv redis-3.2.5 /usr/local/redis cd /usr/local/redis 下操作： 编译安装 sudo make sudo make test 测试 sudo make install 安装 测试 cd /usr/local/redis/src /redis-server redis服务器 cd /usr/local/redis/src /redis-cli redis客户端 创建相关目录 sudo mkdir /etc/redis 创建一个redis目录 sudo mkdir /var/lib/redis 创建redis存储路径 安装服务 sudo sh /usr/local/redis/utils/install_server.sh 测试 redis-server redis-cli 配置文件 sudo vim /etc/redis/6379.conf 62行 bind 0.0.0.0 482行 requirepass xxx(用户名) sudo redis-server /etc/redis/6379.conf `]]></content>
      <tags>
        <tag>阿里云，Ubuntu，linux</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[手把手教小白搭建属于自己的博客]]></title>
    <url>%2F2017%2F07%2F22%2F%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E5%B0%8F%E7%99%BD%E6%90%AD%E5%BB%BA%E5%B1%9E%E4%BA%8E%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2%2F</url>
    <content type="text"><![CDATA[如何开始搭建自己的博客 首先需要准备搭建环境 然后要有属于自己的GitHub账号 最后才可以连接到网络上面去]]></content>
      <tags>
        <tag>hexo</tag>
        <tag>github</tag>
        <tag>博客</tag>
      </tags>
  </entry>
</search>
